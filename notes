Notes

9/25/2017
Documenting a new VM:

Network > srv12 > File Share > Disc Images >Linux OS's > Ubuntu > Desktop > 14 > 64 > 14.04
Copy to desktop
Open VMWare
Open new virtual machine
Tell it to use the Ubuntu iso
Standard setup

9/27/2017

shell/CLI - command line interface, allows user to interact with hardware
shell is also a command language interpreter that executes commands read for the standard input device
prompt
pwd  print working directory
/etc/    top level directory, contains files to configure the system
sudo  superuser do (do as superuser)
apt-get  advanced package tool, front end tool for dpkg, Debian package management tool
finger  find out information about users
pinky  lightweight finger
dependency  use package management systems to do dependency checking
dpkg -L  to get list of file locations
dpkg -ql  for locations of application files
apt-get update   update list of available packages when using dpkg
apt-cache depends package    list dependencies of dpkg package
dpkg -purge   will completely remove files including config
etc/apt/sources.list   file edited to select network locations from which installation packages are loaded
dpkg-reconfigure   asks config questions for specific installed package as if it were being installed for the first time
command -parameter -option -switch /directory/file
  all are case sensitive
type - tells you if it's an internal or external command
apropos - lets you search man pages

10/4/17

(Nicole's notes)
To do:
Send email for slack channel braindumps for our tests ctrl f search the PDF
Find a good linux terminal or set up a vm

Know the difference between internal and external command!
Why would you care?
echo $PATH try this and paste what you see


ls  means list  as in list of files
ls -l means long and list more information
ls -la shows all files including hidden ones
ls -lA excludes dot files for security measures
man ls look up correct syntax
less displays text for you to read. Use q to exit

There are 8 sections to the man pages. (manual)
1 user commands
2 kernel system calls
3 library calls - a library code that can be reused over and over
4 device files,nodes, and driers for all your hardware in your system /dev  cd /dev
5 file formats
6 games, screen savers
7 misc macros (little scripts)
8 sysadmin commands used only by root

$man 5 passwd file format of passwd file 
$apropos display appropriate commands
$man -k  is apropos gives you system info (same as above)
know internal commands
cd 
pwd 
echo prints text on screen
exec
time
set
exit
logout
uname tells you info on kernel and hostname 
type -a pwd

Type will tell you if an command is internal or external
./filename execute the file in the current directory (be careful) don’t need path don’t use it.

Absolute path/blah/blah
Relative path begins with . or ..(shortcut)
.. is the parent of your working directory
Shortcuts only go up directory
To go down you must use absolute path

Two easy ways to get back to your homedir!
cd $HOME
cd (enter)
spooled (look this up)
Know the top level directories!

Command completion: type and hit tab
Maximum filename length is 255 (remember this)
$history can show you (limit 500 by default)
$history | tail will show last 10 lines by default (pipeline) (~/.base_history)
$history 30 shows last 30 commands
$!297 executes the command at #297
$history -c clears history to clear passwords etc
$!! Shows the last command like the up arrow (! is called bang) (check this)google

Tip! Review the keyboard shortcut keys for the linux test


10/9/17

User account based security - 2 types of users
regular user ($): created by default when Ubuntu is installed
superuser privileges (#): root in most distros, disabled in Ubuntu
  *Ubuntu - first user created - superuser privileges
  *To make system-wide change, enter sudo and your password
  *For superuser privileges throughout a session, $sudo -i (allows limited superuser privileges to specific users)
  *to return to regular user prompt, type exit & enter
Most flavors of Linus use su to switch users
  *To become root, enter root password, or password of other user
  *$sudo bash -  become root for single cmd - use your password
  *whoami
  *su temporarily switches you to a new shell. If no name specified, you become root user account &  requires root user's pword (exit returns your shell to regular prompt)

config files are plain-text
bash configs are shell scripts
~/.bashrc & ~/.profile main user config files for bash
/etc/bash.bashrc & /etc/profile main global config files
May add dirs to $PATH environmental variable(colon-delimited)
Backup files (xxx.old) before making any changes
Test changes by logging into another virtual terminal
Variable are given names & stores temporarily in memory
When you close terminal window or shell, are variables are lost
System automatically recreates many variables when new shell is opened

~ is home directory
/ is root directory

rc stands for resource configuration
when editing .bashrc, comment things out

Two types of variable used to bash shell:
Environmental variables (ex: PATH and HOME) - used by bash when interpreting commands and performing tasks
Local variables are often associated with used-based tasks

10/11/2017
To do -get ready for a quiz
Relative path to move up
Absolute to move down

Top level directories know these

Setting environmental variables in bash using assignment 
operator (=) & export


metasyntactic variables - look this up for fun

$x=foo
$echo $x $foo

To export to another shell do this:
export Y=foo
sh enter
echo $Y

See where we are now
$ echo $SHELL
/bin/bash
$ exit out back to bash

unset Y To remove the variable 

Always make a backup before you edit a config file. Or any file for that matter
nbrown@ubuntu:~$ PS1="Frog: "
Frog: 
Example of protecting white space after a :
exit 


env gives a list of environmental variables

Stdin = 0 standard input
stdout = 1 standard output
stderr = 2 standard error
Check for the file purple:
find / -name purple
To not display standard error message on screen: 
stderr 2> /dev/null instead of displaying on screen redirect it to dev/null.

Redirection Operators (look these up)

cat will read a file or create one if it does not exist
nbrown@ubuntu:~$ cat > green
Trees are green. Here we added a sentence to the file
nbrown@ubuntu:~$ cat green
Trees are green.
nbrown@ubuntu:~$ 

End of file command is ctrl d

What is ASCII? My computer speaks ASCII. Machine language.
Represents all the numbers and letters of the alphabet

motd message of the day:

nbrown@ubuntu:~$ find / -name motd 2> /dev/null
/usr/share/doc/util-linux/examples/motd
/usr/share/base-files/motd

motd is used to display messages upon login. Legal protection would be one reason to use.

| 
A user wants the script NAME1 to process the contents of the file NAME2, then send the output to the program NAME3

A name1 | name2 > name3
B name1 <name2 | name3
C name1 > name2 | name 3
D name1 

Lx3 brain dump

pipes go from left to right



10/16 Notes

Pipes redirect standard output of the dirst program to the standard input of the second program
xargs command builds a command from its standard input
  find ./ -name "*~" | xargs rm
  Find in current directory and its subdirectories by name any filename that ends in ~ then pipe to xargs (so system will not choke) which calls rm
  (backup files can end in ~)
find / -user Ann | xargs -d "\n" rm

tac command gives you the file in reverse order, line-by-line

join (-t char, -i ignore case) combine files based on fields
paste merge line-by-line
expand (tabs into spaces) unexpand
od (octal dump) show graphic, audio in octal
sort (alphabetic ASCII; -f ignore case) (-n number, -r reverse, -k field)
split (-l number of lines, default 1000 lines; must specify filename prefixaa, ab)
tr SET1 SET1 < groggy translates characters in SET1 to SET2
uniq (deletes duplicate lines) often used with sort

https://shapeshed.com/unix-join/

10/23/17

Processing text with filters

cat a.txt b.txt > both.txt (-n number lines, -b number only non-blank lines)
tac reverse cat
noin (-t char, -i ignore case) combine files based on fields
paste merge line-by-line
expand (tabs into spaces) unexpand
od (octal dump) - show graphic, audio in octal numbers
sort (alphabetic ASCII; -f ignore case) (-n number, -r reverse, -k field)
split (-i number of lines, default 1000 lines; must specify filename prefix)
tr SET1 SET2 < groggy translatases characters in SET1 to SET2
fmt formatting -- default - lines to 75 characters wide
nl number lines
pr file.txt format file to print in line printer - 80 character line
cat -n /etc/profile | pr -d |lpr send contents of /etc/profile with numbered lines, then pipe to format print in double-spaced lines, and finally pipe to actually print the file

cat /etc/shells to see list of available shels
head /etc/group default is first 10 lines of file (-n number)
tail /var/log/messages displays last lines of fils -f or --follow tail keeps file open & displays new lines as they are added to track logs
  -pid=[pid] stop tracking (from -f) when rocess with the specified pid terminates
less large.txt /keyword then / + enter searches ahead (or n alone; or N alone or ? searches in reverse) page display
  g17 moves down to line 17
  q to exit
  h internal help, q goes back to less
  q use as final command in a pipeline
more large.txt used by Unix, can't search backwards
less is more than more

process -- smallest unit that can be run in a processor cycle

File-Summarizing Commands: cut
by byte (-b list), character (-c list), field (-f list, -d char)
Specify by a single number (3), by closed range of numbers (2-3), by an open range (-3 or 3-)
Used in scripts to extract data from another cmd's output
ifconfig eth0 | grep Hwaddr | cut -d " " -f 11 (" " = space as delimiter)
eth0 = ethernet
cat /etc/passwd | grep yourusername | cut -d: -f 1,7

wc file.txt
308       2343      15534      file.txt
newlines  word      bytes
For ASCII files, character and byte counts will be equal

Regular Expressions (regexp) - text patterns (basic & extended)

Alphabetic string - match any string of the same size or longer that contains the regexp
Non-alphabetic characters trigger advanced match rules
bracket expressions - characters in [] square brackets- match any ONE character in brackets b[aeiou]g = bag, beg, big, bog, bug
Range expressions - a[2-4]z matches a2z, a3z, a4z
  a[^1-9]z = abz, akz; ^1-9 = matches any non-number (may also have numbers too)
Any single character - dot (.) represents and *one* character except newline: a.z = a2z, ahz, etc r..d = reed, road, read, etc
Repetition operator of extended regexp:
asterisk = zero or more match
plus sign = 1 or more
question mark = 0 or 1
.* matches any substring
pipe | matches multiple possible strings - OR operator
parenthesis around subexpressions
backslash escape character 
Basic regexp - text string that describe a particular search pattern
Extended regexp - metacharacters have meaning

grep - global regular expression parser
grep searches for files that contain a specified string, returns filename &
---i cannot keep up---look up grep flags and options---

To do:
Touch Command:
touch bubble  (creates a no content file)
ls -la b* (look at the file to confirm it’s empty)

grep in more depth
ps ax | grep xterm know this for the cert
ps x | grep xterm try this too. First number changes
    Get all the processes running and pipe thru grep to find PID for string xterm
Find out what a and x do
ps ax  just run this
man ps
-f -e -i  (learn for grep options)

cat >> bubble (then edit your file)

sed  means screen editor

Figure out how to look at the battle

Make a back up:
cp battle battle.bak (we made a backup copy)
cp battle battle~

sed ‘s/MINE/MY/’ battle >betterbattle

sed ‘s/MINE/MY/gi ’ battle >betterbattle fix this


On the test:
Managing Files
Linux is built to handle multi users.
Filename conventions
Filenames are case sensitive
You can use spaces in the filename, but you have to escape the spaces. (By convention use no spaces or use underscores or camelcase etc.)
Camelcase ok
All caps are ok
255 char or bytes can be used for a filename
Backup files naming convention is to end the filename with ~ or .bak
Special char are ok. ? / backticks
Don’t use forward slashes 
Dots are ok
Wildcard expansion (globbing)

Directory Commands
Most of the commands that apply to files also apply to directories. In particular, ls, mv, touch, and ln all work with directories, with the limitations mentioned earlier. The cp command also works with directories, but only when you use a recursion option, such as -r.

Create a tree structure directory
Remove a directory (try it)
mkdir
mkdir [options] directory-name(s) most often used without options.

rmdir use caution!
When you're deleting an entire directory tree filled with files, you should use rm -R or rm -r rather than rmdir. This is because the rmdir command can delete only an empty directory.


rm -r /grape/*
rm -r /grape
ls -F /dev 
@ symlink
hardlinks 
cp -i
cp -R


10/30/2017

cp from filename to filename or directory
cp bibble grape/peel/seed/
  -keeps unchanged original file in its original location and creates a copy in subdirectory
  -trailing slash means it's a directory. no trailing slash makes a file.
cp -i  interactive, prompt for confirmation before overwrite existing file
cp -R recursive from directory to directory

mv ./bib ./gribble if source and desination filenames are in the same dir, it will rename the file and delete original file bib
mv ./gribble ./desk/grabble if source and destin are in diff dir it will send the original source file to new location with new name and original file is deleted
may move multiple files into one new destination
move or rename files and directories
if on one filesustem - simply rewrite dir entries -- fast
if want to rename  file or directory while moving, simply give it a new name




